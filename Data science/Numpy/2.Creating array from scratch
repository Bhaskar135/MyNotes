
1) Create a length of 10 integer array filled with zeros :

   np.zeros(10, dtype=int)

   o/p : array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

2) Create a 3x5 floating-point array filled with 1 :

   np.ones((3, 5), dtype=float)

   o/p : array([[1., 1., 1., 1., 1.],
                [1., 1., 1., 1., 1.],
                [1., 1., 1., 1., 1.]])

3) Create a 3x5 array filled with 3.14 :

   np.full((3, 5), 3.14)

   o/p : array([[3.14, 3.14, 3.14, 3.14, 3.14],
                [3.14, 3.14, 3.14, 3.14, 3.14],
                [3.14, 3.14, 3.14, 3.14, 3.14]])

4) Create an array filled with a linear sequence Starting at 0, ending at 20, stepping by 2 :

   np.arange(0, 20, 2)   

   o/p : array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18])

5) Create an array of five values evenly spaced between 0 and 1 :

   np.linspace(0, 1, 5)

   o/p : array([ 0., 0.25, 0.5, 0.75, 1. ])

6) Create a 3x3 array of uniformly distributed random values between 0 and 1 :

   np.random.random((3, 3))

   o/p : array([[0.53697819, 0.53621786, 0.99425289],
                [0.00679139, 0.59893325, 0.58628391],
                [0.13236297, 0.54299341, 0.98424707]])

7) Create a 3x3 array of normally distributed random values with mean 0 and standard deviation 1 :

   np.random.normal(0, 1, (3, 3))

   o/p : array([[-0.97643094, -0.62805475,  0.22620382],
                [ 0.14795015,  0.3337426 ,  0.23381024],
                [ 0.4006384 , -1.42730707, -0.1215414 ]])

8) Create a 3x3 array of random integers in the interval [0, 10) :

   np.random.randint(0, 10, (3, 3))

   o/p : array([[6, 3, 1],
                [1, 8, 9],
                [1, 0, 5]])

9) Create a 3x3 identity matrix :

   np.eye(3)

   o/p : array([[1., 0., 0.],
                [0., 1., 0.],
                [0., 0., 1.]])

10) Create an uninitialized array of three integers. The values will be whatever happens to already exist at that memory location :

   np.empty(3)    # here 3 is the number of column.

   o/p : array([1., 1., 1.])

   np.empty(shape, dtype = float, order = ‘C’) : Return a new array of given shape and type, with random values.
Parameters :

-> shape : Number of rows
-> order : C_contiguous or F_contiguous
-> dtype : [optional, float(by Default)] Data type of returned array.

*) NumPy arrays have a fixed type.





































































