
1) Vectorization is used to speed up the Python code without using loop. Using such a function can help in minimizing the running time of code efficiently. 

import numpy as np
np.random.seed(0)
def compute_reciprocals(values):
    output = np.empty(len(values))
    for i in range(len(values)):
        output[i] = 1.0 / values[i]
    return output

values = np.random.randint(1, 10, size=5)
print(compute_reciprocals(values))    # o/p [0.16666667 1.         0.25       0.25       0.125     ]

print(1.0 / values)     # o/p [0.16666667 1.         0.25       0.25       0.125     ]

2) In numpy we can do computation without using loop. Example :

import numpy as np
np.random.seed(0)
values = np.random.randint(1, 10, size=5)

print(values)      # [6 1 4 4 8]
print(values+1)    # [7 2 5 5 9] 

3) we can also operate between two arrays:

np.arange(5) / np.arange(1, 6)

4) ufunc operations for multidimensional arrays :

import numpy as np
np.random.seed(0)
x=np.arange(9).reshape(3,3)
print(x)
print(2**x)

o/p: 
[[0 1 2]
 [3 4 5]
 [6 7 8]]

[[  1   2   4]
 [  8  16  32]
 [ 64 128 256]]

5) Array arithmetic :

import numpy as np
x = np.arange(4)
print(x+3)        # also support multiplication,division,subtraction,negation(eg, -x) and modulus .

x = np.arange(4)
print(-(0.5*x + 1) ** 2)   o/p : [-1.   -2.25 -4.   -6.25]

We can do arithmetic operation like this :

  i) np.add(x, 2)

 ii) np.subtract(x,2)

iii) np.negative(x,2) 

 iv) np.multiply(x,2)

  v) np.divide(x,2) 

 vi) np.floor_divide(x,2)

vii) np.power(x,2)

viii) np.mod(x,2)

6) Absolute value :
 
  i) x = np.array([-2, -1, 0, 1, 2])   

     abs(x)  # o/p array([2, 1, 0, 1, 2])

The corresponding NumPy ufunc is np.absolute , which is also available under the np.abs :

 ii) np.absolute(x)   # o/p array([2, 1, 0, 1, 2])

iii) np.abs(x)   # o/p array([2, 1, 0, 1, 2])













































