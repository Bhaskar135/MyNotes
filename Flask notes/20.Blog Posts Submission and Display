
1) # app/models.py:
class Post(db.Model):
    __tablename__ = 'posts'
    id = db.Column(db.Integer, primary_key=True)
    body = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    author_id = db.Column(db.Integer, db.ForeignKey('users.id'))

class User(UserMixin, db.Model):
    # ...
    posts = db.relationship('Post', backref='author', lazy='dynamic')

2) # app/main/forms.py
class PostForm(FlaskForm):
    body = TextAreaField("What's on your mind?", validators=[DataRequired()])
    submit = SubmitField('Submit')

3) # app/main/views.py:
@main.route('/', methods=['GET', 'POST'])
def index():
    form = PostForm()
    if current_user.can(Permission.WRITE) and form.validate_on_submit():
        post = Post(body=form.body.data, author=current_user._get_current_object())
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('.index'))
    posts = Post.query.order_by(Post.timestamp.desc()).all()
    return render_template('index.html', form=form, posts=posts)

         The current_user behaves like a user object but is really a thin wrapper that contains the actual user object inside. The database needs a real user object, which is obtained by calling _get_current_object() on the proxy object.

4)# app/templates/index.html
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}
...
   <div>
      {% if current_user.can(Permission.WRITE_ARTICLES) %}
         {{ wtf.quick_form(form) }}
      {% endif %}
   </div>
   <ul class="posts">
      {% for post in posts %}
          <li class="post">
             <div class="profile-thumbnail">
                 <a href="{{ url_for('.user', username=post.author.username) }}">
                    <img class="img-rounded profile-thumbnail" src="{{ post.author.gravatar(size=40) }}">
                 </a>
             </div>
             <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
             <div class="post-author">
                 <a href="{{ url_for('.user', username=post.author.username) }}">
                     {{ post.author.username }}
                 </a>
             </div>
             <div class="post-body">{{ post.body }}</div>
         </li>
      {% endfor %}
   </ul>
...

      The User.can() method is used to skip the blog post form for users who do not have the WRITE permission in their role.

5) Blog post on profile pages :
# app/main/views.py

@main.route('/user/<username>')
def user(username):
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    posts = user.posts.order_by(Post.timestamp.desc()).all()       # important line 
    return render_template('user.html', user=user, posts=posts)

6)# app/templates/user.html

...
<h3>Posts by {{ user.username }}</h3>     <!--Don't add {{ user.username }} in index.html-->
{% include '_posts.html' %}
...

     The index.html and user.html both have some similar HTML content. So we make another HTML file "_posts.html" and write the common portion of both the file and include that file in both index.html and user.html like {% include '_posts.html' %}

7) templates/_posts.html
<ul class="posts">
    {% for post in posts %}
        <li class="post">
            {{ moment.include_jquery() }}
            {{ moment.include_moment() }}
           <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
           <div class="post-author">
               <a href="{{ url_for('.user', username=post.author.username) }}">
                   {{ post.author.username }}
               </a>
           </div>
           <div class="post-body">{{ post.body }}</div>
       </li>
    {% endfor %}
 </ul>





























