Creating the Application Directory
 1) git clone https://github.com/miguelgrinberg/flasky.git
 2) cd flasky
 3) git checkout 1a
	or create empty application directory as follows :
 1) mkdir flasky
 2) cd flasky

Creating a virtual environment with Python 3
 1) sudo apt-get install python3-venv
 2) python3 -m venv venv

Working with virtual environment :
 source venv/bin/activate (for linux,mac os)
	or
 venv\scripts\activate(for windows)

 We can use python console by running venv/bin/python (on linux,mac os), venv\Scripts\python (windows)

To deactivate virtual environment : type deactivate 

To install flask : pip install flask 

To check what packages are installed in the virtual environment : pip freeze

Bsic application :
 from flask import Flask
 app=Flask(__name__)	# Flask application instance
 
 @app.route('/')
 def index():
     return '<h1>Hello World</h1>'
 
We can also write like this :
 from flask import Flask
 app=Flask(__name__)
 
 def index():
    return '<h1>Hello World</h1>'

 app.add_url_rule('/','index',index) # 1st parameter is URL, 2nd is endpoint name,3rd is view function.

To run the application :
 1) For Linux and macOS :
     export FLASK_APP=main.py
     flask run
 2) For Microsoft Windows :
     export FLASK_APP=main.py
     flask run

We can also run the app by adding following to the script main.py :
 if __name__=='__main__':
     app.run()
 
Dynamic routes :
 from flask import Flask
 app=Flask(__name__)

 @app.route('/')
 def index():
     return '<h1>Hello World</h1>'

 @app.route('/user/<name>')     # Dynamic route
 def user(name):
     return '<h1>Hello, {}!</h1>'.format(name)

To enable the debug mode :
 export FLASK_APP=main.py
 export FLASK_DEBUG=1
 flask run
 By enabling debug mode Flask watches all the source  code files of your project and automatically restarts the server when any of the files are   modified.
 Or app.run(debug=True)
 Never enable debug mode on a production server.

Jinja Template Engine :
 <h1>Hello {{name}}</h1>
 
 To render the template :
  from flask import Flask,render_template
  app=Flask(__name__)
  @app.route('/user/<name>')
  def user(name):
      return render_template('base.html',name=name)

 Variable of jinja template :
 1) Value from dictionary {{ mydict['key'] }}
 2) Value from list {{ mylist[3] }}
 3) Value from object's method {{ myobj.some_method() }}
 
 Variables can be modified with filters :
 1) {{ name|capitalize }} : Converts first character of the value to uppercase and the rest to lowercase
 2) {{ name|lower }} : Converts the value to lowercase characters
 3) {{ name|upper }} : Converts the value to uppercase characters
 4) {{ name|title }} : Capitalizes each word in the value
 5) {{ name|trim }} : Removes leading and trailing whitespace from the value

Control Structures:
 1) if else :
    {% if user %}
	Hello {{user}}
    {% else %}
	Hello, Stranger!
    {% endif %}
 
 2) for loop :
    <ul>
	{% for comment in comments %}
	    <li>{{ comment }}</li>
	{% endfor %}
    </ul>

 3) function : In jinja template it is called as macro.
    {% macro render_comment(comment) %}
    	<li>{{ comment }}</li>
    {% endmacro %}
    {% for comment in comments %}
	{{ render_comment(comment) }}
    {% endfor %}
    
    To make macros more reusable,they can be stored in another html file(eg. macros.html)
    {% import 'macros.html' as macros %}
    {% for comment in comments %}
	 {{ macros.render_comment(comment) }}
    {% endfor %}

 4) Inheritance :
    base.html :
    <html>
    <head>
        {% block head %}
        <title>{% block title %}{% endblock %} - My Application</title>
        {% endblock %}
    </head>
    <body>
        {% block body %}
        {% endblock %}
    </body>
    </html>
   
   index.html :
   {% extends "base.html" %}
   {% block title %}Index{% endblock %}
   {% block head %}
      {{ super() }}
      <style>
      </style>
   {% endblock %}
   {% block body %}
   <h1>Hello, World!</h1>
   {% endblock %}







