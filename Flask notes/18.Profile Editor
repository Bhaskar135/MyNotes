5) User-Level Profile Editor :
 # app/main/forms.py
 
 class EditProfileForm(FlaskForm):
    name=StringField('Real name', validators=[Length(0,64)])
    location=StringField('Location',validators=[length(0,64)])
    about_me=TextAreaField('About me')
    submit=SubmitField('Submit')


 6) # app/main/views.py
  from flask_login import login_required, current_user

  @main.route('/edit-profile',methods=['GET','POST'])
  @login_required
  def edit_profile():
     form=EditProfileForm()
     if form.validate_on_submit():
        current_user.name=form.name.data
        current_user.location=form.location.data
        current_user.about_me=form.about_me.data
        db.session.add(current_user._get_current_object())
        db.session.commit()
        flash('Your profile has been updated.')
        return redirect(url_for('.user',username=current_user.username))
     form.name.data=current_user.name
     form.location.data=current_user.location
     form.about_me.data=current_user.about_me
     return render_template('edit_profile.html',form=form)

 7) # app/templates/user.html
  {% if user== current_user %}
     <a class="btn btn-default" href="{{ url_for('.edit_profile') }}">Edit Profile</a>
  {% endif %}

 Administrator-Level profile editor :
 1) # app/main/forms.py :
 class EditProfileAdminForm(FlaskForm):
     email=StringField('Email',validators=[ DataRequired(), Length(1,64),Email() ])
     username=StringField('Username',validators=[ DataRequired(), Length(1,64), Regexp('^[A-Za-z0-9_.]*$',0,'Usernames must have only letters, numbers, dots or underscores ') ])
     confirmed=BooleanField('Confirmed')
     role=SelectField('Role',coerce=int)
     name=StringField('Real name', validators=[ Length(0,64) ])
     location=StringField('Location',validators=[ Length(0,64) ])
     about_me=TextAreaField('About me')
     submit=SubmitField('Submit')
     
     def __init__(self,user,*args,**kwargs):
        super(EditProfileAdminForm,self).__init__(*args,**kwargs)
        self.role.choices=[(role.id, role.name) for role in Role.query.order_by(Role.name).all()]
        self.user=user
     
     def validate_email(self,field):
        if field.data!=self.user.email and User.query.filter_by(email=field.data).first():
            raise ValidationError('Email already registered.')
   
     def validate_username(self,field):
        if field.data!=self.user.username and User.query.filter_by(username=field.data).first():
           raise ValidationError('Username already in use.')
 
         The username and email validation condition used for both these fields must first check whether a change to the field was made, and only when there is a change should it ensure that the new value does not duplicate another user's.


2) Defining routes 
# app/main/views.py
from ..decorators import admin_required

@main.route('/edit-profile/<int:id>', methods=['GET','POST'])
@login_required
@admin_required
def edit_profile_admin(id):
   user=User.query.get_or_404(id)    # if id is invalid the request will return a code 404 error.
   form=EditProfileAdminForm(user=user)
   if form.validate_on_submit():
       user.email=form.email.data
       user.username=form.username.data
       user.confirmed=form.confirmed.data
       user.role=Role.query.get(form.role.data)
       user.name=form.name.data
       user.location=form.location.data
       user.about_me=form.about_me.data
       db.session.add(user)
       db.session.commit()
       flash('The profile has been updated.')
       return redirect(url_for('.user',username=user.username))
   form.email.data=user.email
   form.username.data=user.username
   form.confirmed.data=user.confirmed
   form.role.data=user.role_id
   form.name.data=user.name
   form.location.data=user.location
   form.about_me.data=user.about_me
   return render_template('edit_profile.html', form=form, user=user)

        The admin_required decorator will automatically return a 403 error for any users who are not administrators that try to use this route.

 3) To link to this page, another button is added in the user profile page :
 # app/templates/user.html
   {% if current_user.is_administrator() %}
      <a class="btn btn-danger" href="{{ url_for('.edit_profile_admin', id=user.id) }}">Edit Profile [Admin]</a>
   {% endif %}

In my CIRR Project I do admin level profile editor like below :

#app/main/view.py
@main.route('/admin/users/<username>',methods=['GET','POST'])
@login_required
@admin_required
def admin_select_user(username):
    form=EditProfileAdminForm(username)
    user=User.query.filter_by(username=username).first()
    if form.validate_on_submit():
        user.email=form.email.data
        user.username=form.username.data
        user.name=form.name.data
        user.role_id=form.role.data
        user.location=form.location.data
        user.about_me=form.about_me.data
        db.session.add(user)
        db.session.commit()
        flash('User profile has been updated.')
        return redirect(url_for('main.admin_home'))
    form.email.data=user.email
    form.username.data=user.username
    form.name.data=user.name
    form.role.data=user.role_id
    form.location.data=user.location
    form.about_me.data=user.about_me
    return render_template('admin_select_user.html',form=form,username=username,user=user)

#app/main/forms.py

class EditProfileAdminForm(FlaskForm):
    email=StringField('Email',validators=[ DataRequired(), Length(1,64),Email()])
    username=StringField('Username',validators=[ DataRequired(), Length(1,64), Regexp('^[A-Za-z0-9_.]*$',0,'Usernames must have only letters, numbers, dots or underscores ') ])
    name=StringField('Name',validators=[ DataRequired() ])
    role=RadioField('Role',coerce=int)
    location=StringField('Location',validators=[ DataRequired() ])
    about_me=TextAreaField('About me',validators=[ DataRequired() ])
    submit=SubmitField('Submit')
    def __init__(self,user,*args,**kwargs):
        super(EditProfileAdminForm,self).__init__(*args,**kwargs)
        self.role.choices=[(role.id, role.name) for role in Role.query.order_by(Role.name).all()]
        self.user=user


# templates/admin_select_user.html

{% for role in form.role %}
       {{role}}
       {{role.label}}
{% endfor %}      











