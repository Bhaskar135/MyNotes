User Roles :
1)# app/models.py
class Role(db.Model):
    __tablename__= 'roles'      # name of the table in database
    id = db.Column(db.Integer,primary_key=True)
    name=db.Column(db.String(64),unique=True)
    default=db.Column(db.Boolean, default=False, index=True)
    permissions=db.Column(db.Integer)
    users=db.relationship('User',backref='role',lazy='dynamic')

    def __repr__(self):
        return '<Role %r>' % self.name

    def __init__(self,**kwargs):
        super(Role, self).__init__(**kwargs)
        if self.permissions is None:
            self.permissions=0

  Here the default field should be True for only one role and False for all the others.
  Here the permission field defines the list of permissions for the role. Since SQLAlchemy will set this field to None by default, a class constructor
is added that sets it to 0 if an initial value isn't provided in the constructor arguments.
        Task name                                Permission name    Permission value      
    1) Follow users                                  FOLLOW              1
    2) Comment on posts made by others               COMMENT             2
    3) Write articles                                WRITE               4
    4) Moderate comments made by others              MODERATE            8
    5) Administration access                         ADMIN              16

2) For a user role that gives users permission to follow other users and comment on posts, permission value is 1+2 =3.
  # app/models.py
  class Permission:
     FOLLOW=1
     COMMENT=2
     WRITE=4
     MODERATE=8
     ADMIN=16

3) # app/models.py
 
 class Role(db.Model):
    #........

    def add_permission(self,perm):
        if not self.has_permission(perm):
            self.permissions += perm
    
    def remove_permission(self,perm):
        if self.has_permission(perm):
            self.permissions -= perm
    
    def reset_permissions(self):
        self.permissions = 0

    def has_permission(self,perm):
        return self.permissions & perm == perm

4) flask shell
>>> from app.models import Permission
>>> r=Role(name='User')
>>> r.add_permission(Permission.FOLLOW)
>>> r.add_permission(Permission.WRITE)
>>> r.has_permission(Permission.FOLLOW)
True
>>> r.has_permission(Permission.ADMIN)
False
>>> r.reset_permissions()
>>> r.has_permission(Permission.FOLLOW)
False


5) Create roles by using method :

# app/models.py
class Role(db.Model):
    #.......
    @staticmethod
    def insert_roles():
        roles={
            'User' : [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE ],
            'Moderator' : [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE],  
            'Admin' : [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE, Permission.ADMIN ],
        }

        default_role='User'
        for r in roles:
            role=Role.query.filter_by(name=r).first()
            if role is None:
                role=Role(name=r)
            role.reset_permissions()
            for perm in roles[r]:
                role.add_permission(perm)
            role.default=(role.name==default_role)
            db.session.add(role)
        db.session.commit()

  The insert_roles() method is a static method. So, we can call it by using class name.eg, Role.insert_roles()

6) Role assignment : The role assigned at registration time will be the 'User' role. But the exception is made for the administrator, who needs to be asigned the 'admin' role from the start.

7) The admin is identified by an email address stored in the FLASKY_ADMIN configuration variable.
# app/models.py

class User(UserMixin, db.Model):
    #........

    def __init__(self,**kwargs):   
        super(User,self).__init__(**kwargs)
        if self.role is None:
            if self.email==current_app.config['FLASKY_ADMIN']:
                self.role=Role.query.filter_by(name='Admin').first()
            if self.role is None:
                self.role = Role.query.filter_by(default=True).first()
    
           The User constructor invokes the constructor of the base classes, and after that if the object does not have a role defined, it sets the admin or user role depending on the email address.

8) Now We have to check whether users have a given permission in the role they have been assigned or not 
  # app/models.py
from flask_login import UserMixin, AnonymousUserMixin
 
class User(UserMixin, db.Model):
    #......
    def can(self,perm):
        return self.role is not None and self.role.has_permission(perm)

    def is_administrator(self):
        return self.can(Permission.ADMIN)

class AnonymousUser(AnonymousUserMixin):
    def can(self,permissions):
        return False
    
    def is_administrator(self):
        return False

login_manager.anonymous_user=AnonymousUser
 
    The can() method added to the User model returns True if the requested permission is present in the role.

9) Now we make two decorators, one for generic permission checks and one for the administration permission check.
 # app/decorators.py
from functools import wraps
from flask import abort
from flask_login import current_user
from .models import Permission

def permission_required(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args,**kwargs):
            if not current_user.can(permission):
                abort(403)
            return f(*args,**kwargs)
        return decorated_function
    return decorator

def admin_required(f):
    return permission_required(Permission.ADMIN)(f)

   These decorators are built with the help of functools package and return 403 response when the current user does not have the requested permission.

# app/templates/403.html : <h1>You are not allowed to access this .</h1>

10) Permissions also need to be checked from templates. To avoid having to add a template argument in every render_template() call, a context processor can be used. Context processors make variables available to all templates during rendering.

# app/main/__init__.py :
@main.app_context_processor
def inject_permissions():
    return dict(Permission=Permission)

11) Now test the roles and permissions :
# tests/test_user_model.py :
 from app.models import User,Permission,AnonymousUser
 class UserModelTestCase(unittest.TestCase):
    # ........
    def test_user_role(self):
        u=User(email='john@example.com',password='cat')
        self.assertTrue(u.can(Permission.FOLLOW))
	self.assertTrue(u.can(Permission.COMMENT))
	self.assertTrue(u.can(Permission.WRITE))
	self.assertFalse(u.can(Permission.MODERATE))
        self.assertFalse(u.can(Permission.ADMIN))

    def test_anonymous_user(self):
        u=AnonymousUser()
        self.assertFalse(u.can(Permission.FOLLOW))
	self.assertFalse(u.can(Permission.COMMENT))
	self.assertFalse(u.can(Permission.WRITE))
	self.assertFalse(u.can(Permission.MODERATE))
        self.assertFalse(u.can(Permission.ADMIN))

12) flask shell
>>> Role.insert_roles()
>>> Role.query.all()

13) Now remove the setUp() and tearDown() method from test_basic.py

14) Now update the userlist so that all the user accounts that were created before roles and permissions existed have a role assigned.
flask shell
>>> admin_role=Role.query.filter_by(name='Admin').first()
>>> default_role=Role.query.filter_by(default=True).first()
>>> for u in User.query.all():
        if u.email==app.config['FLASKY_ADMIN']:
            u.role=admin_role
        else:
            u.role=default_role

>>> db.session.commit()




