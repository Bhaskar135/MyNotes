Large Application Structure :
    1) Project_name : 
         i) app                 : The flask application
               a) templates 
               b) static
               c) main : 
                    i) __init__.py
                   ii) errors.py
                  iii) forms.py
                   iv) views.py
               d) __init__.py
               e) email.py
               f) models.py
         ii) migrations         : It contains the database migration scripts
        iii) tests              : Unit tests are written           
               a) __init__.py
               b) test*.py
         iv) venv
          v) requirements.txt   :  lists the package dependencies so that it is easy to regenerate an identical virtual environment on a different pc.
         vi) config.py  :  Stores the configuration settings.
        vii) flasky.py  :  It defines the Flask application instance and some tasks.

     2) In config.py, we use different databases during dvelopment, testing, and production so that they don't interfere with each other.
     # config.py
        import os
	basedir=os.path.abspath(os.path.dirname(__file__))

	class Config:       # base class
            SECRET_KEY=os.environ.get('SECRET_KEY') or 'hard to guess string'
    	    MAIL_SERVER=os.environ.get('MAIL_SERVER','smtp.gmail.com')
    	    MAIL_PORT=int(os.environ.get('MAIL_PORT','587'))
            MAIL_USE_TLS=os.environ.get('MAIL_USE_TLS','true').lower() in ['true','on','1']
    	    MAIL_USERNAME=os.environ.get('MAIL_USERNAME')
     	    MAIL_PASSWORD=os.environ.get('MAIL_PASSWORD')
            FLASKY_MAIL_SUBJECT_PREFIX='[Flasky]'
            FLASKY_MAIL_SENDER='gogoib570@gmail.com'
            FLASKY_ADMIN=os.environ.get('FLASKY_ADMIN')
            SQLALCHEMY_TRACK_MODIFICATIONS=False
            @staticmethod
            def init_app(app):
                pass

       class DevelopmentConfig(Config):     #sub class
           DEBUG=True
           SQLALCHEMY_DATABASE_URI= os.environ.get('DEV_DATABASE_URL') or 'mysql+pymysql://root:root@localhost/dev'

       class TestingConfig(Config):       #sub class
           TESTING=True
           SQLALCHEMY_DATABASE_URI=os.environ.get('TEST_DATABASE_URL') or 'mysql+pymysql://root:root@localhost/test'

       class ProductionConfig(Config):       #sub class
           SQLALCHEMY_DATABASE_URI=os.environ.get('DATABASE_URL') or 'mysql+pymysql://root:root@localhost/prod'

       config = {
          'development': DevelopmentConfig,
          'testing': TestingConfig,
          'production':ProductionConfig,
          'default':DevelopmentConfig
       }
    
    3) pip install flask-bootstrap
       pip install flask-mail
       pip install flask-moment
       pip install flask-sqlalchemy


 Email configuration :
 # app/email.py

from flask import current_app, copy_current_request_context, render_template
from .import mail
from threading import Thread
from flask_mail import Message

def send_email(to,subject,template,**kwargs):
    msg=Message(current_app.config['FLASKY_MAIL_SUBJECT_PREFIX']+subject, sender=current_app.config['FLASKY_MAIL_SENDER'], recipients=[to])
    msg.body=render_template(template+'.txt',**kwargs)
    thr=Thread(target=copy_current_request_context(send_async_email),args=[current_app._get_current_object(),msg])
    thr.start()
    return thr

def send_async_email(app,msg):
    with app.app_context():
        mail.send(msg)
    

 










































