
1) Example, A database of students and the classes they are taking. Clearly, you can’t add a foreign key to a class in the students table, because a student takes many classes—one foreign key is not enough. Likewise, you cannot add a foreign key to a student in the classes table, because classes have more than one student. Both sides need a list of foreign keys.

2) The solution is to add a third table to the database, called an association table. Now the many-to-many relationship can be decomposed into two one-to-many relationships from each of the two original tables to the association table.

3) The association table in this example is called registrations . Each row in this table represents an individual registration of a student in a class.

4) Querying a many-to-many relationship is a two-step process:
    a) To obtain the list of classes a student is taking, you start from the one-to-many relationship between students and registrations and get the list of registrations for the desired student.
    b) The one-to-many relationship between classes and registrations is traversed in the many-to-one direction to obtain all the classes associated with the registrations retrieved for the student.
    c) Similarly to find all the students in a class, you start from the class and get a list of registrations, then get the students linked to those registrations.

The code ->
     registrations = db.Table('registrations',
          db.Column('student_id', db.Integer, db.ForeignKey('students.id')),
          db.Column('class_id', db.Integer, db.ForeignKey('classes.id'))
     )

     class Student(db.Model):
          id = db.Column(db.Integer, primary_key=True)
          name = db.Column(db.String)
	  classes = db.relationship('Class', secondary=registrations, backref=db.backref('students', lazy='dynamic'), lazy='dynamic')

     class Class(db.Model):
          id = db.Column(db.Integer, primary_key=True)
          name = db.Column(db.String)

      *) In the case of a many-to-many relationship the db.relationship have an additional secondary argument must be set to the association table.
      *) The relationship can be defined in either one of the two classes, with the backref argument taking care of exposing the relationship from the other side as well.
      *) The association table is defined as a simple table, not as a model, since SQLAlchemy manages this table internally.

Eg, To register a class c to a student s :
      >>> s.classes.append(c)
      >>> db.session.add(s)

    Querying list of classes for a student :
      >>> s.classes.all()

    Querying list of students of a class :
      >>> c.students.all()        # students is the arguement of db.backref() in Student model.

    To drop the class c for student s :
      >>> s.classes.remove(c) 


    




























