 10) User Authentication with Flask-Login : 
     a) pip install flask-login
     b) Some methods of Flask-Login :
        i) is_authenticated : Must be True if the user has valid login credentials.
       ii) is_active : Must be True if the user is allowed to login or False otherwise. A False value can be used for disabled accounts.
      iii) is_anonymous : Must always be False for regular users and True for a special user object that represents anonymous users.
       iv) get_id() : Must return a unique identifier for the user, encoded as a Unicode string.
              To implement these methods Flask-Login provides a UserMixin class.
  
 # app/models.py :    
  from flask_login import UserMixin
  class User(UserMixin, db.Model):
      __tablename__='users'
      id=db.Column(db.Integer,primary_key=True)
      email=db.Column(db.String(50), unique=True, index=True)
      role_id=db.Column(db.Integer,db.ForeignKey('roles.id'))
      password_hash=db.Column(db.String(128))
    

 11) Now initialised the Flask-Login in the application 
  # app/__init__.py
   from flask_login import LoginManager
   login_manager=LoginManager()
   login_manager.login_view='auth.login'
   def create_app(config_name):
       # ......
       login_manager.init_app(app)

       #........
       return app
 
 12) # app/models.py : user loader function 
 from . import login_manager

 @login_manager.user_loader           # this decorator is used to register the function with Flask-Login and call it when it needs to retrieve information about the login user.
 def load_user(user_id):
     return User.query.get(int(user_id))

 13) # app/auth/forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length, Email

class LoginForm(FlaskForm):
    email=StringField('Email',validators=[ DataRequired(), Length(1,50), Email() ],render_kw={'placeholder':'Enter Email'})
    password=PasswordField('Password',validators=[ DataRequired() ],render_kw={'placeholder':'Enter Password'})
    remember_me=BooleanField('Keep me logged in')
    submit=SubmitField('Log In')

 14) # templates/auth/login.html
 <html>
  <head>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static',filename='styles/login.css') }}">
  </head>
  <body>
    <div id='outer-div'>
      <div class="heading-container" style="background-color:#2d95af;height:50%">
         <h3>Login</h3>
      </div>
      <form action="" method="post">
  	<div class="container">
           {{ form.hidden_tag() }}
           {{ form.email.label }}{{ form.email }}
           {{ form.password.label }}{{ form.password }}
           {{ form.remember_me }}{{ form.remember_me.label }}
           {{ form.submit(class='btn') }}
        </div>
        <div class="container clearfix" style="background-color:#f1f1f1">
           <div class="reg">
              New user ? Register <a href="{{ url_for('auth.register') }}">here</a> 
           </div>
           <div>
             <a href="#">Forgot password ?</a> 
           </div>
        </div>
     </form> 
   </div>
</body>
</html>
 
 15) # app/templates/home.html
   <body>
     <h1>
        Hello, {% if current_user.is_authenticated %}
                   {{current_user.name}}
               {% else %}
                   Stranger
               {% endif %}
     </h1>
   </body>

       'current_user' variable is defined by Flask-Login and available to view functions and templates. The variable contains currently logged-in user or anonymous user object if the user is not logged in. Anonymous user objects have the is_authenticated property set to False.

Signing users in : 

1) # app/auth/views.py :
from flask import render_template, redirect, request, url_for, flash
from flask_login import login_user
from . import auth
from ..models import User
from .forms import LoginForm

@auth.route('/login',methods=['GET','POST'])
def login():
    form = LoginForm()       # object of LoginForm()
    if form.validate_on_submit():
        user=User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user,form.remember_me.data)      # remember_me is optional
            next=request.args.get('next')
            if next is None or not next.startswith('/'):
                next=url_for('main.index')
            return redirect(next)
        flash('Invalid username or password.')
    return render_template('auth/login.html',form=form)

      Here if remember_me is True then long term cookie set to user's browser. If remeber_me is False then when user close the browser then again he will have to login.

2) # app/templates/auth/login.html
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}
{% block title %}Flasky - Login{% endblock %}
{% block page_content %}
<div class="page-header">
<h1>Login</h1>
</div>
<div class="col-md-4">
{{ wtf.quick_form(form) }}
</div>
{% endblock %}

3) Signing Users Out : 
 # app/auth/views.py
from flask_login import login_user, logout_user, login_required
@auth.route('/logout')
@login_required
def logout():
   logout_user()
   flash('You have been logged out.')
   return redirect(url_for('main.index'))

4) Testing Login :
 # app/templates/home.html

 Hello, {% if current_user.is_authenticated %}
                {{current_user.name}}
                <a href="{{ url_for('auth.logout') }}">Logout</a>
           {% else %}
                Stranger
                <a href="{{ url_for('auth.login') }}">Login</a>
           {% endif %}

5) flask shell
>>> u = User(email='john@example.com', username='john', password='cat')
>>> db.session.add(u)
>>> db.session.commit()

6) Adding a User Registration Form : 
# app/auth/forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length, Email, Regexp, EqualTo
from wtforms import ValidationError
from ..models import User

..........

class RegistrationForm(FlaskForm):
    email=StringField('Email',validators=[ DataRequired(), Length(1,50), Email() ],render_kw={'placeholder':'Enter your Email'})
    username=StringField('Username',validators=[DataRequired(), Length(1,64),Regexp('^[A-Za-z][A-Za-z0-9_.]*$',0,'Usernames must have only letters,numbers,dots or underscores') ])
    password=PasswordField('Password',validators=[DataRequired(),EqualTo('password2',message='Passwords must match.')],render_kw={'placeholder':'Enter password'})
    password2=PasswordField('Confirm password',validators=[DataRequired()],render_kw={'placeholder':'Confirm password'})
    submit=SubmitField('Register')
    def validate_email(self,field):
        if User.query.filter_by(email=field.data).first():
            raise ValidationError('Email already registered.')

    def validate_username(self,field):
        if User.query.filter_by(username=field.data).first():
            raise ValidationError('Username already registered.')


7) # app/templates/auth/login.html
<p>
 New user?
 <a href="{{ url_for('auth.register') }}">
 Click here to register
 </a>
</p>

8) Registering new users :

# app/auth/views.py : 
from .forms import LoginForm, RegistrationForm
@auth.route('/register',methods=['GET','POST'])
def register():
    form=RegistrationForm()
    if form.validate_on_submit():
        user=User(name=form.name.data,email=form.email.data,password=form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('You can now login.')
        return redirect(url_for('auth.login'))
    return render_template('auth/register.html',form=form)

9) Generating account confirmation tokens with itsdangerous:
    *) itsdangerous is a package that generate cryptographic signature. The itsdangerous package provides several types of token generators. Among them, the class TimedJSONWebSignatureSerializer generates JSON Web Signatures (JWSs) with a time expiration. The constructor of this class takes an encryption key as an argument. 
    *) dumps() generates cryptographic signature for the data given as an argument(eg id ) and then serializes the data plus the signature as a convenient token string.
    *) loads() decode the token.

 a) flask shell
   >>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
   >>> s=Serializer(app.config['SECRET_KEY'],expires_in=3600)    # argument is encryption key and expire time.
   >>> token=s.dumps({ 'confirm':23 })   
   >>> token
   >>> data=s.loads(token)    # loads() decode the token.The function verifies signature and expiration time and if both are valid, returns original data. If the token is invalid then exception is raised.  
   >>> data

10) # app/models.py
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from flask import current_app
from .import db

class User(UserMixin, db.Model):
    #......
    confirmed=db.Column(db.Boolean,default=False)

    def generate_confirmation_token(self,expiration=3600):   # validity time for token is 1 hour
        s=Serializer(current_app.config['SECRET_KEY'],expiration)
        return s.dumps({'confirm':self.id}).decode('utf-8')
    
    def confirm(self,token):      # verifies the token and if valid then set confirmed=True. Also check id from the token matches the logged in user
        s=Serializer(current_app.config['SECRET_KEY'])
        try:
            data=s.loads(token.encode('utf-8'))
        except:
            return False
        if data.get('confirm')!=self.id:
            return False
        self.confirmed=True
        db.session.add(self)
        return True

11) Sending confirmation Emails :
# app/auth/views.py
from ..email import send_email

@auth.route('/register',methods=['GET','POST'])
def register():
    form=RegistrationForm()
    if form.validate_on_submit():
        #......
        db.session.add(user)
        db.session.commit()
        token=user.generate_confirmation_token()
        send_email(user.email,'Confirm Your Account','auth/email/confirm',user=user,token=token)
        flash('A confirmation email has been sent to you by email.')
        return redirect(url_for('main.index'))
    return render_template('auth/register.html',form=form)

12) # app/templates/auth/email/confirm.txt :

Dear {{ user.username }},
Welcome to Flasky!
To confirm your account please click on the following link:
{{ url_for('auth.confirm',token=token, _external=True) }}
Sincerely, 
The Flasky Team
Note: replies to this email address are not monitored. 

13) # app/auth/views.py
from flask_login import current_user

@auth.route('/confirm/<token>')
@login_required
def confirm(token):
   if current_user.confirmed:
      return redirect(url_for('main.index'))
   if current_user.confirm(token):
      db.session.commit()
      flash('You have confirmed your account. Thanks!')
   else :
      flash('The confirmation link is invalid or has expired.')
   return redirect(url_for('main.index'))

        When the users click on the link from the confirmation email they are asked to log in before they reach this view function. The function first checks if the logged-in user is already confirmed, and in that case it redirects to the home page. Because the actual token confirmation is done entirely in the User model, all the view function needs to do is call confirm() method from User model and then flash a message.

        The unconfirmed users are allowed to do login but only show them a page that asks them to confirm their accounts before they can gain further access. This can be done using Flask's before_request() method.

14) # app/auth/views.py
 @auth.before_app_request
 def before_request():
     if current_user.is_authenticated and not current_user.confirmed and request.blueprint!='auth' and request.endpoint!='static':
         return redirect(url_for('auth.unconfirmed'))

 @auth.route('/unconfirmed')
 def unconfirmed():
     if current_user.is_anonymous or current_user.confirmed:
         return redirect(url_for('main.index'))
     return render_template('auth/unconfirmed.html')

         The before_app_request handler will run when :
  a) A user is logged in i.e. current_user.is_authenticated is True.
  b) The account for the user is not confirmed.
  c) The requested URL is outside of the authentication blueprint and is not for a static file.

15) For the case if the original email was lost then :

# app/auth/views.py
@auth.route('/confirm')
@login_required
def resend_confirmation():
    token=current_user.generate_confirmation_token()
    send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token)
    flash('A new confirmation email has been sent to you by email.')
    return redirect(url_for('main.index'))

16)# templates/auth/unconfirmed.html

{% extends "base.html" %}
{% block title %}
    Flasky-Confirm your account
{% endblock %}

{% block page_content %}
    <h1>Hello {{current_user.username}}!</h1>
    <h2>You have not confirmed your account yet.</h2>
    <p>Before you can access this site you need to confirm your account. Check your inbox, you should have received an email with a confirmation link.</p>
    <p>Need another confirmation email?<a href="{{url_for('auth.resend_confirmation')}}">Click here</a></p>
{% endblock %}

17) The subject of the email is generated like ->
   FLASKY_MAIL_SUBJECT_PREFIX+2nd argument of send_email() function call

18) After clicked the link of email and then login the account at that time confirmed field of User model set to True or 1.





















