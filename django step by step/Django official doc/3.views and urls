
1) #polls/views.py
#..........
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

2) #polls/urls.py
from django.urls import path
from . import views
urlpatterns = [
    path('', views.index, name='index'),
    path('<int:question_id>/', views.detail, name='detail'),     # ex: /polls/5/
    path('<int:question_id>/results/', views.results, name='results'),  # ex: /polls/5/results/
    path('<int:question_id>/vote/', views.vote, name='vote'),      # ex: /polls/5/vote/
]

3) #polls/views.py

from django.http import HttpResponse
from .models import Question
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    output = ', '.join([q.question_text for q in latest_question_list])
    return HttpResponse(output)

4) #settings.py

TEMPLATES = [
    {
        #......
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        #......
    },
]

5) #templates/index.html

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

6) #polls/views.py

.....
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'index.html', context)
.....

7) The view raises the Http404 exception if a question with the requested ID doesn’t exist.

#polls/views.py
......
from django.shortcuts import get_object_or_404, render
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'detail.html', {'question': question})
.....

      There’s also a get_list_or_404() function, which works just as get_object_or_404() – except using filter() instead of get(). 

8) #templates/detail.html

<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>

9) Namespacing URL names : The tutorial project has just one app, polls. In real Django projects, there might be more than one app. How does Django differentiate the URL names between them. The answer is to add namespaces to your URLconf.

#polls/urls.py

from django.urls import path
from . import views

app_name = 'polls'       #new 
 
urlpatterns = [
    #........
]

10) #templates/index.html

<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>










