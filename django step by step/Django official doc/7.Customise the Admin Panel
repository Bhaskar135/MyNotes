
1) To order the fields of Question model in admin panel. 

#polls/admin.py

from django.contrib import admin
from .models import Question

class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

2) You might want to split the form up into fieldsets:

#polls/admin.py

from django.contrib import admin
from .models import Question

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        ( None,              {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

admin.site.register(Question, QuestionAdmin)

3) Register Choice model to admin.

from django.contrib import admin
from .models import Choice, Question
# ...
admin.site.register(Choice)

4) Remove the register() call for the Choice model. It’d be better if you could add a bunch of Choices directly when you create the Question object.  Let’s make that happen :

#polls/admin.py

from django.contrib import admin
from .models import Question,Choice

class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        ( None,              {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)

     *) There are three slots for related Choices as specified by extra.

5) Django offers a tabular way of displaying inline related objects. To use it, change the ChoiceInline declaration to read:

#polls/admin.py

class ChoiceInline(admin.TabularInline):
    #.....

6) By default, Django displays the str() of each object. But sometimes it’d be more helpful if we could display individual fields. To do that, use the list_display admin option .

#polls/admin.py

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        ( None,              {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]
    list_display = ('question_text', 'pub_date', 'was_published_recently')


7) Adds a “Filter” sidebar that lets people filter the change list by the pub_date field:

    a)  # polls/models.py

       class Question(models.Model):
           #........

           was_published_recently.admin_order_field = 'pub_date'
           was_published_recently.boolean = True
           was_published_recently.short_description = 'Published recently?'

    b) #polls/admin.py

       class QuestionAdmin(admin.ModelAdmin):
           #.....
           list_filter = ['pub_date']


  *) Because pub_date is a DateTimeField, Django knows to give appropriate filter options: “Any date”, “Today”, “Past 7 days”, “This month”, “This year”.

8) Let’s add some search capability:

#polls/admin.py

class QuestionAdmin(admin.ModelAdmin):
    #.....
    search_fields = ['question_text']

  *) You can use as many fields as you’d like. Limiting the number of search fields to a reasonable number will make it easier for your database to do the search.







































