
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField()
    number_of_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline

1) It is possible to easily create new instance with all fields values copied. In the simplest case, you can set pk to None. 

>>> blog = Blog(name='My blog', tagline='Blogging is easy')
>>> blog.save()    # blog.pk == 1

>>> blog.pk = None
>>> blog.save()    # blog.pk == 2

>>> Blog.objects.all()      # Two objects return with pk 1 and 2


2) Things get more complicated if you use inheritance. Consider a subclass of Blog:

class ThemeBlog(Blog):
    theme = models.CharField(max_length=200)

>>> django_blog = ThemeBlog(name='Django', tagline='Django is easy', theme='python')
>>> django_blog.save() # django_blog.pk == 1

    Due to how inheritance works, you have to set both pk and id to None:

>>> django_blog.pk = None
>>> django_blog.id = None
>>> django_blog.save() # django_blog.pk == 2

3) This process doesn’t copy relations that aren’t part of the model’s database table. For example, Entry has a ManyToManyField to Author. After duplicating an entry, you must set the many-to-many relations for the new entry:

>>> entry = Entry.objects.all()[0] # some previous entry
>>> old_authors = entry.authors.all()
>>> entry.pk = None
>>> entry.save()   #  making a new entry
>>> entry.authors.set(old_authors)   #  making relationship with old authors to new entry.

4) For a OneToOneField, you must duplicate the related object and assign it to the new object’s field to avoid violating the one-to-one unique constraint. For example, assuming entry is already duplicated as above:

>>> detail = EntryDetail.objects.all()[0]
>>> detail.pk = None
>>> detail.entry = entry    # entry is the OneToOneField.
>>> detail.save()    


*) Note that the select_related() QuerySet method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example:

>>> e = Entry.objects.select_related().get(id=2)
>>> print(e.blog)  # Doesn't hit the database; uses cached version.
>>> print(e.blog)  # Doesn't hit the database; uses cached version.















































