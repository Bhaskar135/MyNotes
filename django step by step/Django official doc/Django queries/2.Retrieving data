
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField()
    number_of_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline


1) Retrieving all objects :

>>> all_entries = Entry.objects.all()


2) Retrieving specific datas with filters : The two most common ways to refine a QuerySet are:

    a) filter(**kwargs) : Returns a new QuerySet containing objects that match the given lookup parameters.

    b) exclude(**kwargs) : Returns a new QuerySet containing objects that do not match the given lookup parameters.

    *) Field lookups : Field lookups are how you specify the query of an SQL "WHERE" clause. They’re specified as keyword arguments to the QuerySet methods filter(), exclude() and get().
      
      Basic lookups keyword arguments take the form field__lookuptype=value. 
      
      Example :  Entry.objects.filter(pub_date__lte='2006-01-01')

a) filter() : For example, to get a QuerySet of blog entries from the year 2006, use filter() like so:

    i) Entry.objects.filter(pub_date__year=2006)

   ii) Chaining Filters :   Entry.objects.filter(headline__startswith='What').exclude(pub_date__gte=datetime.date.today()).filter(pub_date__gte=datetime.date(2005, 1, 30))

     This takes the initial QuerySet of all entries in the database, adds a filter, then an exclusion, then another filter.

  iii) >>> q1 = Entry.objects.filter(headline__startswith="What")
       >>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
       >>> q3 = q1.filter(pub_date__gte=datetime.date.today())

    *) The first is a base QuerySet containing all entries that contain a headline starting with “What”. 

    *) The second is a subset of the first, with an additional criteria that excludes records whose pub_date is today or in the future. 

    *) The third is a subset of the first, with an additional criteria that selects only the records whose pub_date is today or in the future.


3) Retrieving a single object with get() : filter() will always give you a QuerySet, even if only a single object matches the query. So if you know there is only one object that matches your query, you can use the get() method.

   >>> one_entry = Entry.objects.get(pk=1) Or

   >>> entry = Entry.objects.filter(...).exclude(...).get()

4) Limiting QuerySets : 

   >>> Entry.objects.all()[:5]

   >>> Entry.objects.all()[5:10]    # from index 5 to 10 (exclude index 10) 

   >>> Entry.objects.all()[:10:2]    # from 0 index to 10 (exclude index 10) with step 2

   >>> Entry.objects.order_by('headline')[0:1].get()    # To retrieve a single object rather than a list. This returns the first Entry in the database, after ordering entries alphabetically by headline:

5) 





































