

from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField()
    number_of_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline


1) This example retrieves all Entry objects with a Blog whose name is 'Beatles Blog':

    >>> Entry.objects.filter(blog__name='Beatles Blog')     # here blog is the foreign key

2) It works backwards too. To refer to a “reverse” relationship, use the lowercase name of the model( if you explicitly declare "related_name" then use that)

    >>> Blog.objects.filter(entry__headline__contains='Lennon')

3) If you are filtering across multiple relationships and one of the intermediate models doesn’t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are NULL), but valid, object there. All this means is that no error will be raised. For example, in this filter:

    >>> Blog.objects.filter(entry__authors__name='Lennon')

    If there was no author associated with an entry, it would be treated as if there was also no name attached, rather than raising an error because of the missing author. 

4)  >>> Blog.objects.filter(entry__authors__name__isnull=True)
 
    It will return Blog objects that have an empty name on the author and also those which have an empty author on the entry. 

5) If you don’t want those latter objects, you could write:

   >>> Blog.objects.filter(entry__authors__isnull=False, entry__authors__name__isnull=True)








































