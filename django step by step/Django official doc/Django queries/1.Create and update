
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField()
    number_of_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline


1) Inserting fields 

>>> from blog.models import Blog
>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
>>> b.save()


2) Updating fields

>>> b.name = 'New name'
>>> b.save()


3) Updating a foreign key field

>>> from blog.models import Blog, Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog
>>> entry.save()


4) Updating a ManyToManyField : use add(), This example adds the many instances of Author to the entry object :

>>> from blog.models import Blog, Entry, Author
>>> entry = Entry.objects.get(pk=1)
>>> joe = Author.objects.create(name="Joe")
>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> entry.authors.add(joe, john, paul)


5) Updating multiple objects at once : 
 
   a) use update() method.

   b) You can only set non-relation fields and ForeignKey fields using this method. 

>>> Entry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')  # non relation field

>>> b = Blog.objects.get(pk=1)
>>> Entry.objects.all().update(blog=b)   # Change every Entry so that it belongs to this Blog(foreign key).

# Update all the headlines belonging to this Blog.
>>> b = Blog.objects.get(pk=1)
>>> Entry.objects.select_related().filter(blog=b).update(headline='Everything is the same')


   c) We can use F() inside update 

>>> Entry.objects.all().update(number_of_pingbacks=F('number_of_pingbacks') + 1)

   d) Unlike F() objects in filter and exclude clauses, you canâ€™t introduce joins when you use F() objects in an update().
   
# This will raise a FieldError
>>> Entry.objects.update(headline=F('blog__name')) 















































