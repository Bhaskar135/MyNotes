
1) 
from django.http import HttpResponse
def my_view(request):
    if request.method == 'GET':
        #.......
        return HttpResponse('result')

    Is similar to :

from django.http import HttpResponse
from django.views import View
class MyView(View):
    def get(self, request):
        #........
        return HttpResponse('result')

And the URL will be like :

from django.urls import path
from myapp.views import MyView
urlpatterns = [
    path('about/', MyView.as_view()),
]


2) There are two ways to configure or set class attributes :
    
          from django.http import HttpResponse
          from django.views import View

          class GreetingView(View):
              greeting = "Good Day"
              def get(self, request):
                   return HttpResponse(self.greeting)

    a) Overriding attributes and methods in the subclass : 

          class MorningGreetingView(GreetingView):
              greeting = "Morning to ya"

    
    b) urlpatterns = [
            path('about/', GreetingView.as_view(greeting="G'day")),
       ]
           
3) Handling forms with class-based views :

from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import MyForm

def myview(request):
    if request.method == "POST":
        form = MyForm(request.POST)
        if form.is_valid():
            #...........
            return HttpResponseRedirect('/success/')
    else:
        form = MyForm(initial={'key': 'value'})
    return render(request, 'form_template.html', {'form': form})

       A similar class-based view might look like:

from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.views import View
from .forms import MyForm

class MyFormView(View):
    form_class = MyForm
    initial = {'key': 'value'}
    template_name = 'form_template.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial=self.initial)
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)
        if form.is_valid():
            # <process form cleaned data>
            return HttpResponseRedirect('/success/')

        return render(request, self.template_name, {'form': form})


4) Adding extra context : You need to present some extra information beyond that provided by the generic view. 

from django.views.generic import DetailView
from books.models import Book, Publisher

class PublisherDetail(DetailView):
    model = Publisher
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['book_list'] = Book.objects.all()
        return context

5) Viewing subsets of objects :

from django.views.generic import DetailView
from books.models import Publisher

class PublisherDetail(DetailView):
    model=Publisher
    context_object_name = 'publisher'

    Below code is same as upper code. However, by using queryset to define a filtered list of objects you can be more specific about the objects that will be visible in the view.
 
from django.views.generic import DetailView
from books.models import Publisher

class PublisherDetail(DetailView):
    context_object_name = 'publisher'
    queryset = Publisher.objects.all()

6) Dynamic filtering : To filter down the objects given in a list page by some key in the URL. ListView has a get_queryset() method we can override. By default, it returns the value of the queryset attribute, but we can use it to add more logic.

      The key part to making this work is that when class-based views are called, various useful things are stored on self; as well as the request (self.request) this includes the positional (self.args) and name-based (self.kwargs) arguments captured according to the URLconf.

# urls.py
from django.urls import path
from books.views import PublisherBookList

urlpatterns = [
    path('books/<publisher>/', PublisherBookList.as_view()),
]

# views.py
from django.shortcuts import get_object_or_404
from django.views.generic import ListView
from books.models import Book, Publisher

class PublisherBookList(ListView):
    template_name = 'books/books_by_publisher.html'
    def get_queryset(self):
        self.publisher = get_object_or_404(Publisher, name=self.kwargs['publisher'])
        return Book.objects.filter(publisher=self.publisher)

   We can also add the publisher into the context at the same time, so we can use it in the template:

# ...
def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['publisher'] = self.publisher
    return context





































